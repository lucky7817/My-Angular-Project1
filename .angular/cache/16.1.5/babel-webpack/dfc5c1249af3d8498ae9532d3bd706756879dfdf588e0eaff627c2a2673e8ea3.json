{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  // loginHandler() {\n  //   throw new Error('Method not implemented.');\n  // }\n  // user: IUserLog | undefined;\n  // USER_KEY = '[user]'\n  // get isLoggedIn(): boolean {\n  //   return !!this.user;\n  // }\n  constructor(http) {\n    this.http = http;\n    this.usersList = [];\n    // try {\n    //   const lsUser = localStorage.getItem(this.USER_KEY) || '';\n    //   this.user = JSON.parse(lsUser);\n    // } catch (error) {\n    //   this.user = undefined;\n    // }\n  }\n  // login(): void {\n  //   this.user = {\n  //     username: 'dilyan@gmail.com',\n  //     password: 'Dilyan',\n  //   };\n  //   localStorage.setItem(this.USER_KEY, JSON.stringify(this.user));\n  // }\n  createPicture(picName, pickMaterials, picCategory, picImage, picPrice, picDescription) {\n    return this.http.post(`https://my-project-angular-4dd57-default-rtdb.europe-west1.firebasedatabase.app/${picCategory}.json`, {\n      picName,\n      pickMaterials,\n      picCategory,\n      picImage,\n      picPrice,\n      picDescription\n    });\n  }\n  createUser(username, firstname, secondname, lastname, email, phone, country, place, postcode, street, password, rePassword) {\n    return this.http.post('https://my-project-angular-4dd57-default-rtdb.europe-west1.firebasedatabase.app/users.json', {\n      username,\n      firstname,\n      secondname,\n      lastname,\n      email,\n      phone,\n      country,\n      place,\n      postcode,\n      street,\n      password,\n      rePassword\n    });\n  }\n  // getPicture(id: string) {\n  //   return this.http.get<IPicture>(`https://my-project-angular-4dd57-default-rtdb.europe-west1.firebasedatabase.app/abstract/${id}.json`)\n  // }\n  checkUserExist() {\n    return this.http.get(`https://my-project-angular-4dd57-default-rtdb.europe-west1.firebasedatabase.app/users.json`).pipe(map(resData => {\n      const usersList = [];\n      for (const key in resData) {\n        if (resData.hasOwnProperty(key)) {\n          usersList.push({\n            userId: key,\n            ...resData[key]\n          });\n        }\n      }\n      return usersList;\n    })).subscribe({\n      next: users => {\n        this.usersList = users;\n        console.log(this.usersList);\n      },\n      error: err => {\n        // this.isLoading = false;\n        console.log(`Error: ${err}`);\n      }\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","AuthService","constructor","http","usersList","createPicture","picName","pickMaterials","picCategory","picImage","picPrice","picDescription","post","createUser","username","firstname","secondname","lastname","email","phone","country","place","postcode","street","password","rePassword","checkUserExist","get","pipe","resData","key","hasOwnProperty","push","userId","subscribe","next","users","console","log","error","err","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\GitHub JS\\My-Angular-Project1\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { IPicture, IUser, IUserLog } from '../shared/interfaces';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  usersList: IUser[] = [];\n\n  // loginHandler() {\n  //   throw new Error('Method not implemented.');\n  // }\n\n  // user: IUserLog | undefined;\n  // USER_KEY = '[user]'\n\n  // get isLoggedIn(): boolean {\n  //   return !!this.user;\n  // }\n\n  constructor(private http: HttpClient) {\n    // try {\n    //   const lsUser = localStorage.getItem(this.USER_KEY) || '';\n    //   this.user = JSON.parse(lsUser);\n    // } catch (error) {\n    //   this.user = undefined;\n    // }\n  }\n\n  // login(): void {\n  //   this.user = {\n  //     username: 'dilyan@gmail.com',\n  //     password: 'Dilyan',\n  //   };\n\n  //   localStorage.setItem(this.USER_KEY, JSON.stringify(this.user));\n  // }\n\n  \n\n  createPicture(picName: string, pickMaterials: string, picCategory: string,\n    picImage: string, picPrice: number, picDescription: string) {\n    return this.http.post<IPicture>(`https://my-project-angular-4dd57-default-rtdb.europe-west1.firebasedatabase.app/${picCategory}.json`,\n      { picName, pickMaterials, picCategory, picImage, picPrice, picDescription });\n  }\n\n  createUser(username: string, firstname: string,\n    secondname: string, lastname: string, email: string, phone: string,\n    country: string, place: string, postcode: string, street: string, password: string,\n    rePassword: string) {\n    return this.http.post<IUser[]>('https://my-project-angular-4dd57-default-rtdb.europe-west1.firebasedatabase.app/users.json',\n      {\n        username, firstname, secondname, lastname, email, phone, country, place,\n        postcode, street, password, rePassword\n      });\n  }\n\n  // getPicture(id: string) {\n  //   return this.http.get<IPicture>(`https://my-project-angular-4dd57-default-rtdb.europe-west1.firebasedatabase.app/abstract/${id}.json`)\n\n  // }\n\n\n\n  checkUserExist() {\n    return this.http.get<{ [userId: string]: IUser }>(`https://my-project-angular-4dd57-default-rtdb.europe-west1.firebasedatabase.app/users.json`)\n      .pipe(map(resData => {\n        const usersList = [];\n        for (const key in resData) {\n          if (resData.hasOwnProperty(key)) {\n            usersList.push({ userId: key, ...resData[key] })\n          }\n        }\n        return usersList\n      }))\n      .subscribe({\n        next: (users) => {\n          this.usersList = users;\n          console.log(this.usersList); \n        },\n        error: (err) => {\n          // this.isLoading = false;\n          console.log(`Error: ${err}`);\n        },\n      });\n  }\n\n}\n\n\n// const object = {\n//   name: \"John\",\n//   age: 30\n// };\n\n// if (Object.keys(object).some((key) => object[key] === \"John\")) {\n//   console.log(\"Value exists\");\n// } else {\n//   console.log(\"Value does not exist\");\n// }\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAItB;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAbxB,KAAAC,SAAS,GAAY,EAAE;IAcrB;IACA;IACA;IACA;IACA;IACA;EACF;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAIAC,aAAaA,CAACC,OAAe,EAAEC,aAAqB,EAAEC,WAAmB,EACvEC,QAAgB,EAAEC,QAAgB,EAAEC,cAAsB;IAC1D,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAW,mFAAmFJ,WAAW,OAAO,EACnI;MAAEF,OAAO;MAAEC,aAAa;MAAEC,WAAW;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC;IAAc,CAAE,CAAC;EAChF;EAEAE,UAAUA,CAACC,QAAgB,EAAEC,SAAiB,EAC5CC,UAAkB,EAAEC,QAAgB,EAAEC,KAAa,EAAEC,KAAa,EAClEC,OAAe,EAAEC,KAAa,EAAEC,QAAgB,EAAEC,MAAc,EAAEC,QAAgB,EAClFC,UAAkB;IAClB,OAAO,IAAI,CAACtB,IAAI,CAACS,IAAI,CAAU,4FAA4F,EACzH;MACEE,QAAQ;MAAEC,SAAS;MAAEC,UAAU;MAAEC,QAAQ;MAAEC,KAAK;MAAEC,KAAK;MAAEC,OAAO;MAAEC,KAAK;MACvEC,QAAQ;MAAEC,MAAM;MAAEC,QAAQ;MAAEC;KAC7B,CAAC;EACN;EAEA;EACA;EAEA;EAIAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACvB,IAAI,CAACwB,GAAG,CAA8B,4FAA4F,CAAC,CAC5IC,IAAI,CAAC5B,GAAG,CAAC6B,OAAO,IAAG;MAClB,MAAMzB,SAAS,GAAG,EAAE;MACpB,KAAK,MAAM0B,GAAG,IAAID,OAAO,EAAE;QACzB,IAAIA,OAAO,CAACE,cAAc,CAACD,GAAG,CAAC,EAAE;UAC/B1B,SAAS,CAAC4B,IAAI,CAAC;YAAEC,MAAM,EAAEH,GAAG;YAAE,GAAGD,OAAO,CAACC,GAAG;UAAC,CAAE,CAAC;;;MAGpD,OAAO1B,SAAS;IAClB,CAAC,CAAC,CAAC,CACF8B,SAAS,CAAC;MACTC,IAAI,EAAGC,KAAK,IAAI;QACd,IAAI,CAAChC,SAAS,GAAGgC,KAAK;QACtBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAClC,SAAS,CAAC;MAC7B,CAAC;MACDmC,KAAK,EAAGC,GAAG,IAAI;QACb;QACAH,OAAO,CAACC,GAAG,CAAC,UAAUE,GAAG,EAAE,CAAC;MAC9B;KACD,CAAC;EACN;;AAhFWvC,WAAW,C;mBAAXA,WAAW,EAAAwC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX3C,WAAW,C;SAAXA,WAAW;EAAA4C,OAAA,EAAX5C,WAAW,CAAA6C,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}