{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from 'src/enveronments/environment-development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.picturesList2 = [];\n  }\n  getPictures(picturePath) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.get(`${apiUrl}/${picturePath}.json`).pipe(map(resData => {\n      const picturesArray = [];\n      for (const key in resData) {\n        if (resData.hasOwnProperty(key)) {\n          picturesArray.push({\n            picId: key,\n            ...resData[key]\n          });\n        }\n      }\n      return picturesArray;\n    }));\n  }\n  getPicture(id) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.get(`${apiUrl}/abstract/${id}.json`);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","environment","ApiService","constructor","http","picturesList2","getPictures","picturePath","apiUrl","get","pipe","resData","picturesArray","key","hasOwnProperty","push","picId","getPicture","id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\GitHub JS\\My-Angular-Project1\\src\\app\\api.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { IGetPicture, IPicture } from './shared/interfaces';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/enveronments/environment-development';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  picturesList2: IGetPicture[] = []\n  \n  constructor(private http: HttpClient) { }\n\n  getPictures(picturePath: string) {\n    const { apiUrl } = environment;\n    return this.http.get<{ [picId: string]: IGetPicture }>(`${apiUrl}/${picturePath}.json`)\n    .pipe(map(resData => {\n      const picturesArray = [];\n      for (const key in resData) {\n        if (resData.hasOwnProperty(key)) {\n          picturesArray.push({ picId: key, ...resData[key] })\n        }\n      }\n      return picturesArray\n    }))    \n  }\n\n  getPicture(id: string)  {\n    const { apiUrl } = environment;\n    return this.http.get<IPicture>(`${apiUrl}/abstract/${id}.json`)\n    \n  }\n}\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,0CAA0C;;;AAKtE,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,aAAa,GAAkB,EAAE;EAEO;EAExCC,WAAWA,CAACC,WAAmB;IAC7B,MAAM;MAAEC;IAAM,CAAE,GAAGP,WAAW;IAC9B,OAAO,IAAI,CAACG,IAAI,CAACK,GAAG,CAAmC,GAAGD,MAAM,IAAID,WAAW,OAAO,CAAC,CACtFG,IAAI,CAACV,GAAG,CAACW,OAAO,IAAG;MAClB,MAAMC,aAAa,GAAG,EAAE;MACxB,KAAK,MAAMC,GAAG,IAAIF,OAAO,EAAE;QACzB,IAAIA,OAAO,CAACG,cAAc,CAACD,GAAG,CAAC,EAAE;UAC/BD,aAAa,CAACG,IAAI,CAAC;YAAEC,KAAK,EAAEH,GAAG;YAAE,GAAGF,OAAO,CAACE,GAAG;UAAC,CAAE,CAAC;;;MAGvD,OAAOD,aAAa;IACtB,CAAC,CAAC,CAAC;EACL;EAEAK,UAAUA,CAACC,EAAU;IACnB,MAAM;MAAEV;IAAM,CAAE,GAAGP,WAAW;IAC9B,OAAO,IAAI,CAACG,IAAI,CAACK,GAAG,CAAW,GAAGD,MAAM,aAAaU,EAAE,OAAO,CAAC;EAEjE;;AAxBWhB,UAAU,C;mBAAVA,UAAU,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAVpB,UAAU,C;SAAVA,UAAU;EAAAqB,OAAA,EAAVrB,UAAU,CAAAsB,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}